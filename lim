#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import json
import os
import subprocess
import sys
from pathlib import Path

# --- Constants ---
# Путь к основному TUI-монитору
LIM_MONITOR_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "lim_monitor.py")
# Путь к новому навигационному TUI (для list, go, tp)
LIM_TUI_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "lim_tui.py")

CONFIG_DIR = Path.home() / ".config/lim"
JSON_CACHE_FILE = CONFIG_DIR / "docker_cache.json"
BOOKMARKS_FILE = CONFIG_DIR / "bookmarks.json"
UPDATER_SCRIPT_PATH = "/usr/local/sbin/lim_update_cache.py"
GO_SCRIPT_NAME = 'l.sh'
RETURN_SCRIPT_NAME = 'b.sh'

# --- Rich Import with Fallback ---
try:
    from rich.console import Console
    from rich.table import Table
    console = Console()
    RICH_AVAILABLE = True
except ImportError:
    class Console:
        def print(self, *args, **kwargs):
            import re
            text = args[0] if args else ''
            text = re.sub(r'\[/?.*?\]', '', str(text))
            print(text)
    console = Console()
    RICH_AVAILABLE = False

# --- Generic Navigation Script Creation ---
def create_navigation_scripts(target_path_str: str):
    """Creates temporary navigation scripts l.sh and b.sh for any given path."""
    original_dir = os.getcwd()
    try:
        if not target_path_str or target_path_str == 'N/A':
            console.print(f"[red]Ошибка: Целевой путь не указан или недоступен.[/red]")
            return False
        target_path = Path(target_path_str).resolve()
        if not target_path.is_dir():
            console.print(f"[red]Ошибка: Целевая директория не найдена: {target_path}[/red]")
            return False

        go_script_path = Path(GO_SCRIPT_NAME).resolve()
        return_script_path = target_path / RETURN_SCRIPT_NAME

        script_template = (
            '#!/bin/bash\n'
            '# Временный скрипт. Будет удален через ~5 секунд.\n'
            '( sleep 5; rm -- "{script_path}" 2>/dev/null ) &\n'
            'cd "{dest_dir}" || {{ echo "[Error] Не удалось перейти в директорию: {dest_dir}"; exit 1; }}\n'
            'echo "Переход в: $(pwd)"\n'
            'echo "Открывается новый shell..."{return_info}\n'
            'exec bash\n'
        )

        return_info_for_go = f"\n echo \"Для возврата в '{original_dir}', введите ./{RETURN_SCRIPT_NAME} в этой директории.\""
        go_content = script_template.format(script_path=str(go_script_path), dest_dir=str(target_path), return_info=return_info_for_go)
        go_script_path.write_text(go_content, encoding='utf-8')
        os.chmod(go_script_path, 0o755)

        return_info_for_return = ''
        return_content = script_template.format(script_path=str(return_script_path), dest_dir=original_dir, return_info=return_info_for_return)
        return_script_path.write_text(return_content, encoding='utf-8')
        os.chmod(return_script_path, 0o755)

        console.print(f"[bold green]Скрипты навигации созданы![/bold green]")
        console.print(f" -> Для перехода введите: [bold cyan]./{GO_SCRIPT_NAME}[/bold cyan], нажмите [bold]Tab[/bold] и [bold]Enter[/bold].")
        console.print(f" -> Для возврата введите: [bold cyan]./{RETURN_SCRIPT_NAME}[/bold cyan] в директории [yellow]'{target_path.name}'[/yellow].")
        return True
    except Exception as e:
        console.print(f"[bold red]Ошибка при создании скриптов навигации: {e}[/bold red]")
        if 'go_script_path' in locals() and go_script_path.exists():
            go_script_path.unlink(missing_ok=True)
        return False

# --- Bookmark (tp) Functions ---
def load_bookmarks():
    if not BOOKMARKS_FILE.is_file(): return {}
    try:
        with open(BOOKMARKS_FILE, 'r', encoding='utf-8') as f: return json.load(f)
    except (json.JSONDecodeError, OSError): return {}

def save_bookmarks(bookmarks):
    CONFIG_DIR.mkdir(parents=True, exist_ok=True)
    with open(BOOKMARKS_FILE, 'w', encoding='utf-8') as f: json.dump(bookmarks, f, indent=4)

def tp_add(name, path_str):
    bookmarks = load_bookmarks()
    if name in bookmarks: console.print(f"[yellow]Закладка '{name}' уже существует. Перезапись.[/yellow]")
    try:
        path = Path(path_str).resolve()
        if not path.is_dir():
            console.print(f"[red]Ошибка: Путь не является директорией: {path}[/red]"); return
    except Exception as e:
        console.print(f"[red]Ошибка: Некорректный путь '{path_str}': {e}[/red]"); return
    bookmarks[name] = str(path)
    save_bookmarks(bookmarks)
    console.print(f"[green]Закладка '{name}' -> '{path}' добавлена.[/green]")

def tp_del(name):
    bookmarks = load_bookmarks()
    if name in bookmarks:
        del bookmarks[name]; save_bookmarks(bookmarks)
        console.print(f"[green]Закладка '{name}' удалена.[/green]")
    else: console.print(f"[red]Закладка '{name}' не найдена.[/red]")

def tp_list():
    bookmarks = load_bookmarks()
    if not bookmarks:
        console.print("[yellow]Список закладок пуст. 'lim tp add <имя> <путь>'[/yellow]"); return
    table = Table(title="[bold blue]Закладки для телепортации[/bold blue]", header_style="bold magenta")
    table.add_column("Имя", style="cyan", min_width=15)
    table.add_column("Путь", style="green")
    for name, path in sorted(bookmarks.items()): table.add_row(name, path)
    console.print(table)

def tp_teleport(name):
    path = load_bookmarks().get(name)
    if path: create_navigation_scripts(path)
    else:
        console.print(f"[red]Закладка '{name}' не найдена.[/red]")
        console.print("Используйте 'lim tp list' для просмотра.")

# --- Docker Functions ---
def find_container_in_cache(identifier: str):
    containers = load_docker_cache()
    for info in containers:
        if (info.get("name") == identifier or
            info.get("short_id") == identifier or
            info.get("id", "").startswith(identifier)):
            return info
    return None

def go_to_compose_dir(identifier: str):
    container = find_container_in_cache(identifier)
    if not container:
        console.print(f"[red]Контейнер '{identifier}' не найден. Попробуйте 'lim updatecache'[/red]"); return
    create_navigation_scripts(container.get("compose_path"))

def inspect_container(identifier: str):
    container = find_container_in_cache(identifier)
    container_id = container.get("id") if container else identifier
    console.print(f"Запускаю 'docker inspect' для '{identifier}'...")
    try:
        result = subprocess.run(
            ["docker", "inspect", container_id],
            capture_output=True, text=True, check=True, encoding='utf-8'
        )
        parsed_json = json.loads(result.stdout)
        if RICH_AVAILABLE:
            from rich.syntax import Syntax
            syntax = Syntax(json.dumps(parsed_json, indent=4), "json", theme="monokai", line_numbers=True)
            console.print(syntax)
        else:
            print(json.dumps(parsed_json, indent=4))
    except subprocess.CalledProcessError as e:
        console.print(f"[red]Ошибка inspect контейнера '{identifier}':\n{e.stderr}[/red]")
    except FileNotFoundError:
        console.print("[red]Ошибка: команда 'docker' не найдена.[/red]")

# --- Main Function ---
def main():
    parser = argparse.ArgumentParser(description="LIMbo - Light Intuitive Monitor & Docker CLI")
    subparsers = parser.add_subparsers(dest="command", help="Доступные команды")

    # TUI commands
    subparsers.add_parser("tui", aliases=["nav", "list", "l"], help="Запустить навигационный TUI для Docker и закладок")

    # Docker CLI commands
    inspect_parser = subparsers.add_parser("inspect", aliases=["i"], help="Выполнить docker inspect для контейнера")
    inspect_parser.add_argument("container", help="Имя или ID контейнера")
    go_parser = subparsers.add_parser("go", help="Создать скрипты для перехода в директорию docker-compose")
    go_parser.add_argument("container", help="Имя или ID контейнера")
    subparsers.add_parser("updatecache", help="Принудительно обновить кэш Docker")

    # Teleport (tp) CLI commands
    tp_parser = subparsers.add_parser("tp", help="Телепортироваться в директорию по закладке")
    tp_parser.add_argument("name", nargs="?", help="Имя закладки для телепортации")
    tp_subparsers = tp_parser.add_subparsers(dest="tp_command", help="Действия с закладками")
    
    add_parser = tp_subparsers.add_parser("add", help="Добавить закладку")
    add_parser.add_argument("name", help="Имя для новой закладки")
    add_parser.add_argument("path", nargs="?", default=os.getcwd(), help="Путь к директории (по умолчанию: текущая)")
    
    del_parser = tp_subparsers.add_parser("del", help="Удалить закладку")
    del_parser.add_argument("name", help="Имя закладки для удаления")
    
    tp_subparsers.add_parser("list", help="Показать все закладки")

    subparsers.add_parser("help", help="Показать это сообщение и выйти")

    args = parser.parse_args()

    # --- Command Handling ---
    if args.command == "help":
        parser.print_help()
    elif args.command in ["tui", "nav", "list", "l"]:
        try:
            subprocess.run([sys.executable, LIM_TUI_PATH], check=True)
        except FileNotFoundError:
            console.print(f"[red]Ошибка: Не найден скрипт TUI '{LIM_TUI_PATH}'[/red]")
        except Exception as e:
            console.print(f"[red]Ошибка при запуске TUI: {e}[/red]")
    elif args.command in ["inspect", "i"]:
        inspect_container(args.container)
    elif args.command == "go":
        go_to_compose_dir(args.container)
    elif args.command == "updatecache":
        console.print("[yellow]Запуск скрипта обновления кэша...[/yellow]")
        subprocess.run([sys.executable, UPDATER_SCRIPT_PATH], check=False)
    elif args.command == "tp":
        if args.tp_command == 'add': tp_add(args.name, args.path)
        elif args.tp_command == 'del': tp_del(args.name)
        elif args.tp_command == 'list': tp_list()
        elif args.name: tp_teleport(args.name)
        else: tp_list()
    else:
        # Launch main TUI monitor by default
        try:
            subprocess.run([sys.executable, LIM_MONITOR_PATH], check=True)
        except FileNotFoundError:
            console.print(f"[red]Ошибка: Скрипт монитора '{LIM_MONITOR_PATH}' не найден.[/red]")
        except Exception as e:
            console.print(f"[red]Ошибка при запуске интерактивного монитора: {e}[/red]")

if __name__ == "__main__":
    main()